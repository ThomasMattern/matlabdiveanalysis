% Script to extract GPS data recorded during foraging trips identified during
% dive data analysis. It assumes that logger data are stored in a folder named
% like the site of the data to be analyised, and subfolders named like the birdID
% of each deployment. Within the birdID folder it expects to find the GPS data in 
% a text file generated by TechnoSmart's X Manager. 

[filename, pathname] = uigetfile('.csv', 'Select dive analysis file: ');
filePath = fullfile(pathname, filename);  % Ensure proper file path handling

% Automatically detect import options, including delimiter
opts = detectImportOptions(filePath);

% Set all variables to be imported as strings
opts.VariableTypes(:) = {'string'};

% Select only the required variables
opts.SelectedVariableNames = {'birdID', 'TripNumber', 'Date', 'EvtOnset', 'EvtEnd'};

% Read the data into a table using readtable instead of a datastore
data = readtable(filePath, opts);


data.TripNumber=int32(str2double(data.TripNumber));

data.EvtOnset = data.Date + " " +data.EvtOnset;
data.EvtOnset = datetime(data.EvtOnset, 'InputFormat', 'dd/MM/yy HH:mm:ss');

data.EvtEnd = data.Date + " " +data.EvtEnd;
data.EvtEnd = datetime(data.EvtEnd, 'InputFormat', 'dd/MM/yy HH:mm:ss');


ts = groupsummary(data,["birdID","TripNumber"],"min","EvtOnset");
te = groupsummary(data,["birdID","TripNumber"],"max","EvtEnd");

trips = join(ts,te);

clear ts te data;

path = uigetdir('Select folder with raw logger data: ');
dircont = get_dirconts(path);

%Extract site info from dircont
site = split(dircont(1).folder,"\");
site = site{end};
site = strrep(site, " ", "_");

% Open file to store tripfixes in
[fidgps,msg]=fopen(site+'_gps.txt','wt');
fprintf(fidgps,[ 'birdID', '\t',...
                  'TripNumber','\t',...
                  'DateTime','\t',...
                  'Lat', '\t',...
                  'Lon', '\n']);


d = 1;
while d <= length(dircont)
    if isempty(dircont)
        error('No directories found in the given path.');
    end

    currentpath = fullfile(dircont(d).folder, dircont(d).name);  % Ensure correct path

    gpsfile = fullfile(currentpath, 'gps.txt');  % More robust path handling

    % Ensure GPS file exists before reading
    if ~isfile(gpsfile)
        warning('GPS file not found: %s', gpsfile);
        d = d + 1;
        continue;  % Skip to next folder
    end

    opts = detectImportOptions(gpsfile);

    % Ensure all columns are strings first
    opts.VariableTypes(:) = {'string'}; 
    
    % Update only the first 4 columns with correct types
    opts.VariableTypes(1:2) = {'string', 'string'};  % Date and Time as strings
    opts.VariableTypes(3:4) = {'double', 'double'};  % Latitude and Longitude as doubles
    
    % Select only the first 4 columns
    opts.SelectedVariableNames = opts.VariableNames(1:4);  
    
    % Read the data
    rawData = readtable(gpsfile, opts);

    dateTimeStrings = rawData{:,1} + " " + rawData{:,2};
    dateTimeVals = datetime(dateTimeStrings, 'InputFormat', 'dd/MM/yyyy HH:mm:ss');

    gpsTable = table(dateTimeVals, rawData{:,3}, rawData{:,4}, ...
                  'VariableNames', {'DateTime', 'Latitude', 'Longitude'});

    % Ensure `birdID` comparison works
    birdTrips = trips(trips.birdID == string(dircont(d).name), :);

    % Ensure trip processing only happens if there are trips
    if isempty(birdTrips)
        warning('No trips found for birdID: %s', dircont(d).name);
        d = d + 1;
        continue;  % Skip to next folder
    end

    t = 1;
    while t <= height(birdTrips)
        startTime = birdTrips.min_EvtOnset(t);
        endTime =   birdTrips.max_EvtEnd(t);

        tripFixes = gpsTable(gpsTable.DateTime >= startTime & gpsTable.DateTime <= endTime, :);

        for r = 1:height(tripFixes)
            fprintf(fidgps, '%s\t%d\t%s\t%.6f\t%.6f\n', ...
                dircont(d).name, t, ...
                string(datetime(tripFixes.DateTime(r), 'Format', 'dd/MM/yyyy HH:mm:ss')), ...
                tripFixes.Latitude(r), tripFixes.Longitude(r));
        end

        t = t + 1;  
    end

    d = d + 1; 
end


fclose all;